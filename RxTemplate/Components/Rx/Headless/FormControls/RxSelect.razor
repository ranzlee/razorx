<label class="@(ContainerClass)">
  <div class="@(LabelContainerClass)">
    <span class="@(LabelClass)">@(Label)</span>
  </div>
  <select id="@(Id)" 
        name="@(Property)" 
        class="@($"{ControlClass} {(isInvalid ? InvalidClass : "")}")"
        aria-invalid="@(isInvalid ? "true" : false)"
        aria-describedby="@(isInvalid ? $"{Id}-error" : false)"
        @attributes=@(AdditionalAttributes)>
        @foreach (var kv in Options) {
            <option selected="@(Value == kv.Value)" value="@(kv.Value)">@(kv.Key)</option>
        }
  </select>
  @if (isInvalid) {
        @(ValidationContainer)
    }
</label>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string Label { get; set; } = null!;
    [Parameter, EditorRequired] public string Property { get; set; } = null!;
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public string Value { get; set; } = null!;
    [Parameter] public Dictionary<string, string> Options { get; set; } = [];
    [Parameter] public Type? EnumType { get; set; }
    [Parameter] public ValidationContext? ValidationContext { get; set; }
    [Parameter] public RenderFragment? ValidationContainer { get; set; }
    [Parameter] public string ContainerClass { get; set; } = null!;
    [Parameter] public string InvalidClass { get; set; } = null!;
    [Parameter] public string ControlClass { get; set; } = null!;
    [Parameter] public string LabelContainerClass { get; set; } = null!;
    [Parameter] public string LabelClass { get; set; } = null!;

    private bool isInvalid { get; set; }

    protected override void OnParametersSet() {
        if (EnumType is not null) {
            var enumNames = Enum.GetNames(EnumType);
            foreach (var en in enumNames) {
                var e = Enum.Parse(EnumType, en) as Enum;
                Options.Add(e!.GetDescription(), en);
            }
        }
        if (ValidationContext is not null && ValidationContext.TryGetError(Property, out var error)) {
            isInvalid = true;
        }
        if (string.IsNullOrWhiteSpace(Id)) {
            Id = Utilities.GenerateElementId();
        }
    }
} 