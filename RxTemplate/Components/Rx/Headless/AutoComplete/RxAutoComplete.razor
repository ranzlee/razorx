<div id="@(Id)">
    <label class="@(ContainerClass)">
        <div class="@(LabelContainerClass)">
            <span class="@(LabelClass)">@(Label)</span>
        </div>
        <input
            Id="@(Id)-autocomplete-input"
            name="@(Property)" 
            value="@(Value)" 
            type="search"
            hx-get="@(GetListFromRoute)"
            hx-trigger="input changed delay:@(DelayMilliseconds)ms"
            hx-target="#@(Id)-autocomplete-list"
            hx-swap="innerHTML"
            class="@($"{ControlClass} {(isInvalid ? InvalidClass : "")}")"
            autocomplete="off"
            aria-invalid="@(isInvalid ? "true" : false)"
            aria-describedby="@(isInvalid ? $"{Id}-error" : false)"
            aria-expanded="false"
            aria-autocomplete="list" 
            aria-controls="@(Id)-autocomplete-list-items"
            @attributes=@(AdditionalAttributes)>
            <script>
                (function(){
                    var input = document.getElementById('@(Id)-autocomplete-input');
                    input.addEventListener('htmx:beforeRequest', (evt) => {
                        if (evt.target.value.length < @(MinimumLengthToTrigger)) {
                            evt.preventDefault();
                        }
                    });
                })()
            </script>
        @if (isInvalid) {
            @(ValidationContainer)
        }
    </label>
    <input id="@(Id)-autocomplete-list-style" 
        type="hidden" 
        value="@(ListClass)">
    <div tabindex="-1" id="@(Id)-autocomplete-list" class="@(ListContainerClass)"></div>
</div>


@code {
    [Inject] public ValidationContext ValidationContext { get; set; } = null!;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter, EditorRequired] public string Label { get; set; } = null!;
    [Parameter, EditorRequired] public string Property { get; set; } = null!;
    [Parameter, EditorRequired] public string GetListFromRoute { get; set; } = null!;
    [Parameter] public object? Value { get; set; }
    [Parameter] public int DelayMilliseconds { get; set; } = 500;
    [Parameter] public int MinimumLengthToTrigger { get; set; } = 3;
    [Parameter] public RenderFragment? ValidationContainer { get; set; }
    [Parameter] public string ContainerClass { get; set; } = null!;
    [Parameter] public string InvalidClass { get; set; } = null!;
    [Parameter] public string ControlClass { get; set; } = null!;
    [Parameter] public string LabelContainerClass { get; set; } = null!;
    [Parameter] public string LabelClass { get; set; } = null!;
    [Parameter] public string ListContainerClass { get; set; } = null!;
    [Parameter] public string ListClass { get; set; } = null!;
    
    private bool isInvalid { get; set; }
    protected override void OnParametersSet() {
        if (ValidationContext.TryGetError(Property, out var _)) {
            isInvalid = true;
        }
        if (string.IsNullOrWhiteSpace(Id)) {
            Id = Utilities.GenerateElementId();
        }
    }
}