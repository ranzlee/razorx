<button
    id="@($"{ModalId}-{ActionId}")"
    @attributes="@(AdditionalAttributes)">
    @(ChildContent)
</button>
<script>
    (function() {
        var action = document.getElementById("@($"{ModalId}-{ActionId}")");
        var processHxAction = function(hxMethod, routeId) {
            var attr = action.getAttribute(hxMethod);
            if (attr === null) {
                return false;
            }
            var resolvedAttr = action.getAttribute("data-hx-route");
            if (resolvedAttr !== null) {
                action.setAttribute(hxMethod, `${resolvedAttr}/${routeId}`);
                htmx.process(action);
                return true;
            }
            attr = attr.trim();
            if (attr.endsWith("/")) {
                attr = attr.slice(0, -1); 
            }
            action.setAttribute("data-hx-route", attr);
            action.setAttribute(hxMethod, `${attr}/${routeId}`);
            htmx.process(action);
            return true;
        }
        var modal = document.getElementById("@(ModalId)");
        modal.addEventListener("opened", function(evt) {
            var routeId = evt.detail?.id ?? "";
            if (processHxAction("hx-delete", routeId)) {
                return;
            }
            if (processHxAction("hx-post", routeId)) {
                return;
            }
            if (processHxAction("hx-put", routeId)) {
                return;
            }
            processHxAction("hx-patch", routeId);
        });
    })();
</script>

@code {
    private string ActionId = null!;
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string ModalId { get; set; } = null!;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    protected override void OnParametersSet() {
        ActionId = Utilities.GenerateElementId();
    }
}