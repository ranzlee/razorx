<RxFileInput
    ContainerClass="fieldset w-full"
    LabelClass="fieldset-legend"
    ControlClass="file-input w-full"
    InvalidClass="file-input-error"
    ProgressClass="progress progress-success w-full"
    ButtonContainerClass="flex justify-end gap-x-2"
    SubmitButtonClass="btn btn-primary"
    CancelButtonClass="btn btn-neutral"
    Id="@(Id)"
    Label="@(Label)"
    PropertyName="@(PropertyName)"
    ValidationPropertyName="@(ValidationPropertyName)"
    AllowMultiple="@(AllowMultiple)"
    Accept="@(Accept)"
    RequestTimeoutMilliseconds="@(RequestTimeoutMilliseconds)"
    @attributes=@(AdditionalAttributes)>
    <ValidationContainer>
        <RxFormError 
            FormControlId="@(Id)"
            PropertyName="@(ValidationPropertyName)" 
            UseOpacityForValidationErrors="@(UseOpacityForValidationErrors)"
            ContainerClass="label" 
            ErrorMessageClass="text-error" />
    </ValidationContainer>
</RxFileInput>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string Label { get; set; } = null!;
    [Parameter, EditorRequired] public string PropertyName { get; set; } = null!;
    [Parameter] public string? ValidationPropertyName { get; set; }
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public bool AllowMultiple { get; set; }
    [Parameter] public string Accept { get; set; } = string.Empty;
    [Parameter] public int RequestTimeoutMilliseconds { get; set; } = 10 * 60 * 1000;
    [Parameter] public bool UseOpacityForValidationErrors { get; set; }

    protected override void OnParametersSet() {
        if (string.IsNullOrWhiteSpace(Id)) {
            Id = Utilities.GenerateElementId();
        }
    }
}