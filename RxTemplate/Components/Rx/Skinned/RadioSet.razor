<RxRadioSet 
    Id="@(Id)"
    PropertyName="@(PropertyName)" 
    Value="@(Value)" 
    Legend="@(Label)" 
    AllowValidateOnChange="@(AllowValidateOnChange)"
    EnumType="@(EnumType)"
    Options="@(Options)"
    InvalidClass="radio-error"
    ControlClass="radio"
    LegendClass="fieldset-legend"
    ContainerClass="fieldset w-full"
    LabelContainerClass="label fieldset-label cursor-pointer"
    InvalidLabelClass="text-error"
    GroupClass="@($"flex justify-between {(Direction == DirectionType.Vertical ? "flex-col gap-y-2" : "max-md:flex-col max-md:gap-y-2")}")"
    @attributes=@(AdditionalAttributes)>
    <ValidationContainer>
        <RxFormError 
            FormControlId="@(Id)"
            PropertyName="@(PropertyName)" 
            UseOpacityForValidationErrors="@(UseOpacityForValidationErrors)"
            ContainerClass="label" 
            ErrorMessageClass="text-error" />
    </ValidationContainer>
</RxRadioSet>

@code {
    public enum DirectionType {
        Vertical,
        Horizontal
    }
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string PropertyName { get; set; } = null!;
    [Parameter, EditorRequired] public string Label { get; set; } = null!;
    [Parameter] public string Id { get; set; } = null!;
    [Parameter] public string Value { get; set; } = null!;
    [Parameter] public bool AllowValidateOnChange { get; set; }
    [Parameter] public Type? EnumType { get; set; }
    [Parameter] public Dictionary<string, string> Options { get; set; } = [];
    [Parameter] public DirectionType Direction { get; set; }
    [Parameter] public bool UseOpacityForValidationErrors { get; set; }

    protected override void OnParametersSet() {
        if (string.IsNullOrWhiteSpace(Id)) {
            if (AllowValidateOnChange) {
                throw new InvalidOperationException($"{nameof(AllowValidateOnChange)} must have a unique {nameof(Id)} assigned.");    
            }
            Id = Utilities.GenerateElementId();
        }
    }
}