<RxField 
    Id="@(Id)"
    PropertyName="@(PropertyName)" 
    Value="@(Value)" 
    Label="@(Label)" 
    InputType="@(InputType)"
    AllowValidateOnChange="@(AllowValidateOnChange)"
    ContainerClass="fieldset w-full"
    InvalidClass="input-error"
    ControlClass="input w-full"
    LabelClass="fieldset-legend"
    @attributes=@(AdditionalAttributes)>
    <ValidationContainer>
        <RxFormError 
            FormControlId="@(Id)"
            PropertyName="@(PropertyName)" 
            UseOpacityForValidationErrors="@(UseOpacityForValidationErrors)"
            ContainerClass="label" 
            ErrorMessageClass="text-error" />
    </ValidationContainer>
</RxField>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string PropertyName { get; set; } = null!;
    [Parameter, EditorRequired] public string Label { get; set; } = null!;
    [Parameter] public string Id { get; set; } = null!;
    [Parameter] public object? Value { get; set; }
    [Parameter] public bool AllowValidateOnChange { get; set; }
    [Parameter] public string InputType { get; set; } = null!;
    [Parameter] public bool UseOpacityForValidationErrors { get; set; }

    protected override void OnParametersSet() {
        if (string.IsNullOrWhiteSpace(Id)) {
            if (AllowValidateOnChange) {
                throw new InvalidOperationException($"{nameof(AllowValidateOnChange)} must have a unique {nameof(Id)} assigned.");    
            }
            Id = Utilities.GenerateElementId();
        }
    }
}