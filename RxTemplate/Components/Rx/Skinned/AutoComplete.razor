<RxAutoComplete 
    Id="@(Id)"
    Property="@(Property)" 
    Value="@(Value)" 
    SelectedIdProperty="@(SelectedIdProperty)"
    SelectedIdValue="@(SelectedIdValue)"
    Label="@(Label)" 
    GetListFromRoute="@(GetListFromRoute)"
    DelayMilliseconds="@(DelayMilliseconds)"
    MinimumLengthToTrigger="@(MinimumLengthToTrigger)"
    ListMaxPixelHeight="@(ListMaxPixelHeight)"
    AllowValidateOnChange="@(AllowValidateOnChange)"
    SkipOnSelectedValidateOnChange="@(SkipOnSelectedValidateOnChange)"
    ContainerClass="fieldset w-full"
    InvalidClass="input-error"
    ControlClass="input w-full mb-1"
    LabelContainerClass="label flex justify-between"
    LabelClass="fieldset-legend"
    ListContainerClass="dropdown dropdown-open"
    ListClass="dropdown-content menu menu-compact flex-nowrap bg-base-100 rounded-box z-1 p-2 shadow-sm overflow-auto"
    PatternMatchClass="@(PatternMatchClass)"
    @attributes=@(AdditionalAttributes)>
    <ValidationContainer>
        <RxFormError 
            FormControlId="@(Id)"
            Property="@(Property)" 
            ContainerClass="label" 
            ErrorMessageClass="text-error" />
    </ValidationContainer>
</RxAutoComplete>

@code {
    [Parameter(CaptureUnmatchedValues = true)] public IDictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter, EditorRequired] public string Property { get; set; } = null!;
    [Parameter, EditorRequired] public string? SelectedIdProperty { get; set; } = null!;
    [Parameter, EditorRequired] public string Label { get; set; } = null!;
    [Parameter, EditorRequired] public string GetListFromRoute { get; set; } = null!;
    [Parameter] public string Id { get; set; } = null!;
    [Parameter] public string? Value { get; set; }
    [Parameter] public string? SelectedIdValue { get; set; }
    [Parameter] public int DelayMilliseconds { get; set; } = 500;
    [Parameter] public int MinimumLengthToTrigger { get; set; } = 3;
    [Parameter] public int ListMaxPixelHeight { get; set; } = 250;  
    [Parameter] public bool AllowValidateOnChange { get; set; }
    [Parameter] public bool SkipOnSelectedValidateOnChange { get; set; }
    [Parameter] public string PatternMatchClass { get; set; } = string.Empty;

    protected override void OnParametersSet() {
        if (string.IsNullOrWhiteSpace(Id)) {
            if (AllowValidateOnChange) {
                throw new InvalidOperationException($"{nameof(AllowValidateOnChange)} must have a unique {nameof(Id)} assigned.");    
            }
            Id = Utilities.GenerateElementId();
        }
    }
}