<HeadContent>
    <title>Examples</title>
</HeadContent>

<div class="flex justify-center">
    <article class="prose prose-a:link prose-a:link-primary">
        <div class="flex justify-center">
            <h2>Examples</h2>
        </div>
        <p>
            It will be helpful to have knowledge of ASP.NET, C#, HTML, and htmx to build an application with this template. 
            JS skills are nice to have, but not nearly as important as it would be for building a JS-based reactive web application.
        </p>
        <p>
            The main concepts to understand is that everything is event driven and state changes originate on the server. 
            The browser triggers events that htmx issues network requests on. The server returns HTML and htmx updates the
            DOM. Some of the more relevant design choices were to make it easy for the server to 
            send events in the response to the client for htmx to process, and to use JSON instead of form encoding for request
            payloads. The latter decision was primarily based on ASP.NET Minimal API's superior parameter binding capabilities
            with JSON.  
        </p>
        <p>
            The following examples demonstrate these concepts with progressing complexity:
        </p>
        <div>
            <ul>
                <li>
                    <a href="/examples/counter">The Obligatory Counter</a>
                </li>
                <li>
                    <a href="/examples/form">Form Submission and Validation</a>
                </li>
                <li>
                    <a href="/examples/blob">BLOBs</a>
                </li>
                <li>
                    <a href="/examples/crud">The Kitchen Sync</a>
                </li>
            </ul>
        </div>
        <p>
            This meta-framework is not concerned with anything beyond implementing a simple and consistent 
            approach for integrating ASP.NET and htmx. Concerns like authentication, authorization, and data persistence 
            should be implemented with the usual .NET frameworks and strategies, like ASP.NET Core Identity or another OIDC/Entra
            Identity Provider and EntityFramework. There is a basic authentication included in the template for the purpose 
            of demonstrating the auth flow integration and using <code>&lt;AuthorizeView&gt;</code> for authorization-dependent 
            rendering.   
        </p>
        <p>
            There is no JS framework or library included besides htmx. You may add 
            <a target="_blank" href="https://alpinejs.dev/">Alpine.js</a>
            or some other light-weight JS framework for client-only behavior, or 
            <a target="_blank" href="https://hyperscript.org/">Hyperscript</a>, 
            which is developed by the author of htmx. For the included components
            that rely on JS, like the RxThemeSwitch or RxMemoField, the decision was to use 
            <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE">IIFE JS functions</a>
            to keep the dependencies to a bare minimum.    
        </p>
    </article>
</div>
