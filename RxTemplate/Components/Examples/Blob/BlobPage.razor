@implements IComponentModel<BlobPageModel>

<HeadContent>
    <title>Examples: BLOBs</title>
</HeadContent>

<Toast Id="blob-toast" />

<dialog id="delete-modal" class="modal modal-bottom sm:modal-middle">
    <div class="modal-box">
        <div class="flex justify-between items-center bg-base-300 p-5 rounded-sm">
            <div class="text-lg font-bold">
                Delete <RxModalTextNode ModalId="delete-modal" />?
            </div>
        </div>
        <form method="dialog">
            <div class="p-5">
                This is a destructive operation. Are you sure you want to delete the file <RxModalTextNode ModalId="delete-modal" />?
            </div>
            <div class="modal-action">
                <RxModalDismiss ModalId="delete-modal" autofocus class="btn btn-neutral">
                    Cancel
                </RxModalDismiss>
                <RxModalAction
                    ModalId="delete-modal"
                    hx-delete="/examples/blob/" 
                    hx-disabled-elt="this"
                    class="btn btn-error">
                    Delete
                </RxModalAction>
            </div>
        </form>
    </div>
</dialog>

<div class="flex justify-center">
    <article class="prose">
        <div class="flex justify-center">
            <h2>BLOBs</h2>
        </div>
        <p>
            <strong class="bg-warning text-warning-content px-2 rounded-sm">Important:</strong> You must have the VS Code
            <a href="https://marketplace.visualstudio.com/items?itemName=Azurite.azurite" target="_blank" class="link link-primary">Azurite</a> 
            extension installed and enabled for this example. Azurite will store the uploaded BLOBs within the current
            directory VS Code is open to. This will interfere with <code>dotnet watch</code> hot reload. It is recommended
            to set an absolute path for Azurite in the extension settings.
        </p>
        <p>
            The included BLOB service is for demonstration purposes only. It does depend on <code>Azure.Storage.Blobs</code> and
            may be adapted for production use, but the current implementation is only for providing file management operation examples with
            the meta-framework.
        </p>
    </article>
</div>
<div class="flex justify-center mt-5">
    <div class="w-[640px]">
        <SingleBlob Model="@(Model.SingleBlob)" />
    </div>
</div>
<div class="flex justify-center my-5">
    <hr class="w-[640px]" />
</div>
<div class="flex justify-center">
    <div class="w-[640px]">
        <BlobList Model="@(Model.ListBlobs)" />
    </div>
</div>
<div class="flex justify-center mt-5">
    <div class="w-[640px]">
        <FileInput 
            Id="example-blobs" 
            Label="Choose files" 
            Property="files"
            AllowMultiple="@(true)"
            hx-target="#blob-list"
            hx-swap="beforeend transition:true"
            hx-post="/examples/blobs"/>
    </div>
</div>

@code {
    [Parameter] public BlobPageModel Model { get; set; } = new(null, []);
}