@implements IComponentModel<IGridModel<ItemModel>>

<HeadContent>
    <title>Examples: The Kitchen Sync</title>
</HeadContent>

<AuthorizeView>
    <Authorized>
        @*
        The success toast to pop after a successful POST/PUT/DELETE
        *@
        <Toast Id="crud-toast" />

        @*
        The confirm modal for DELETE operations. The contents of the modal are deferred loaded once triggered.
        The trigger is a grid action component present on each row.
        *@
        <dialog id="delete-modal" class="modal modal-bottom sm:modal-middle">
            <div class="modal-box">
                <div class="flex justify-between items-center bg-base-300 p-5 rounded">
                    <div class="text-lg font-bold">
                        <RxModalTextNode ModalId="delete-modal" />
                    </div>
                    <Spinner Id="delete-grid-item" />
                </div>
                <form method="dialog">
                    <RxModalAsyncContent
                        Id="delete-modal-form"
                        ModalId="delete-modal" 
                        RenderFromRoute="/examples/crud/delete-modal">
                        <FallbackContent>
                            <div class="h-[186px]">
                                <Spinner AlwaysVisible="@(true)" />    
                            </div>
                            <div class="modal-action">
                                <RxModalDismiss ModalId="delete-modal" class="btn btn-neutral" autofocus>
                                    Cancel
                                </RxModalDismiss>
                            </div>
                        </FallbackContent>
                    </RxModalAsyncContent>
                </form>
            </div>
        </dialog>

        @*
        The new/edit modal for POST/PUT operations. The contents of the modal are deferred loaded once triggered.
        The trigger is a grid action component present on each row.
        *@
        <dialog id="save-modal" class="modal modal-bottom sm:modal-middle">
            <div class="modal-box">
                <div class="flex justify-between items-center bg-base-300 p-5 rounded">
                    <div class="text-lg font-bold">
                        <RxModalTextNode ModalId="save-modal" />
                    </div>
                    <Spinner Id="save-grid-item" />
                </div>
                <form method="dialog">
                    <RxModalAsyncContent
                        Id="save-modal-form"
                        ModalId="save-modal" 
                        RenderFromRoute="/examples/crud/save-modal">
                        <FallbackContent>
                            <div class="h-[420px]">
                                <Spinner AlwaysVisible="@(true)" />    
                            </div>
                            <div class="modal-action">
                                <RxModalDismiss ModalId="save-modal" class="btn btn-neutral" autofocus>
                                    Cancel
                                </RxModalDismiss>
                            </div>
                        </FallbackContent>
                    </RxModalAsyncContent>
                </form>
            </div>
        </dialog>
    </Authorized>
</AuthorizeView>

<div id="crud-page" class="flex justify-center">
    <article class="prose">
        <div class="flex justify-center">
            <h2>The Kitchen Sync</h2>
        </div>
        <AuthorizeView>
            <NotAuthorized>
                <p>
                    Sign in to enable mutation operations.
                </p>
            </NotAuthorized>
        </AuthorizeView>
    </article>
</div>

<div class="flex justify-between items-end">
    <div class="flex max-sm:flex-col sm:items-end gap-x-2 max-sm:gap-y-1">
        @* 
        Filtering must be implemented external to the grid. Here we allow
        for specific properties bound to the grid to be selected. On selection change, 
        we'll issue a request to get the form elements specific to the filter property chosen.
        *@
        <div class="max-w-40">
            <Select 
                Property="@(nameof(FilterProperty))" 
                Value="@(FilterProperty)" 
                Label="Filter" 
                Options="@(Options)"
                hx-trigger="change"
                hx-get="/examples/crud/filter"
                hx-target="#grid-filter"
                hx-swap="outerHTML transition:true">
            </Select>
        </div>
        <div id="grid-filter"></div>
    </div>
    <AuthorizeView>
        <Authorized>
            <RxModalTrigger 
                Id="new-btn"
                ModalId="save-modal" 
                TriggerOnMouseDown=@(true)
                RouteValue="0"
                TextNodeValue="New Item"
                class="btn btn-primary" 
                aria-label="Add a new item">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
                </svg>
            </RxModalTrigger>
        </Authorized>
    </AuthorizeView>
</div>

@*
The component that contains the RxGrid. This is an async component since it will be 
initially rendered with fallback content (spinner) and then lazy-loaded based on existing state 
for the last page, sort, and filter options used. 
*@
<Grid Model="@(Model)" />


@code {
    private string FilterProperty = null!;
    private Dictionary<string, string> Options = [];
    [Parameter] public IGridModel<ItemModel> Model { get; set; } = null!;
    protected override void OnParametersSet() {
        Options.Add("Select...", string.Empty);
        Options.Add("ID", nameof(ItemModel.Id));
        Options.Add("Date", nameof(ItemModel.Date));
        Options.Add("Temp. C", nameof(ItemModel.TemperatureC));
        Options.Add("Temp. F", nameof(ItemModel.TemperatureF));
        Options.Add("Summary", nameof(ItemModel.Summary));
        Options.Add("Verified", nameof(ItemModel.IsVerified));
        Options.Add("Observed", nameof(ItemModel.TemperatureTaken));
    }
}